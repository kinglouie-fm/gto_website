name: Deploy to Lightsail
on:
  push:
    branches:
      - main
jobs:
  frontend:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.LIGHTSAIL_IP }}
      SSH_USER: ${{ secrets.LIGHTSAIL_USERNAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Vue.js app
        run: npm run build
      
      - name: Debug build output
        run: |
          echo "Build directory contents:"
          ls -la dist/
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
      
      - name: Deploy Frontend
        run: |
          set -euxo pipefail
          rsync -avz --delete dist/ $SSH_USER@$SSH_HOST:/var/www/html/
          ssh $SSH_USER@$SSH_HOST 'sudo systemctl reload nginx'
          ssh $SSH_USER@$SSH_HOST 'ls -la /var/www/html/'

  backend:
    runs-on: ubuntu-latest
    needs: frontend
    env:
      SSH_HOST: ${{ secrets.LIGHTSAIL_IP }}
      SSH_USER: ${{ secrets.LIGHTSAIL_USERNAME }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python deps
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          
      - name: Deploy Backend
        run: |
          set -euxo pipefail
          rsync -avz --delete --exclude='.env' --exclude='venv/' backend/ $SSH_USER@$SSH_HOST:/opt/gto-backend/
          ssh $SSH_USER@$SSH_HOST << 'EOF'
            cd /opt/gto-backend
            source venv/bin/activate
            pip install --upgrade -r requirements.txt
            sudo systemctl restart gto-backend
          EOF
      
      - name: Health Check
        run: |
          ssh $SSH_USER@$SSH_HOST 'curl --fail --max-time 5 http://127.0.0.1:8000/healthz'
